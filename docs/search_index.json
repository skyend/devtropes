[
["index.html", "Welcome", " Welcome 데브트로프 에 오신 것을 환영합니다. 데브트로프 (Dev Tropes) 혹은 개발자 비유도감은 개발자 문화에 연관된 비유들을 수집 및 정리하는 위키입니다. 네이버 국어사전에 따르면 비유란 어떤 현상이나 사물을 직접 설명하지 아니하고 다른 비슷한 현상이나 사물에 빗대어서 설명하는 걸 의미합니다. 비유와 예제를 활용하면 뜻을 보다 쉽게 전달할 수 있지요. 해당 위키는 누구나 수정가능하며, 문의는 여기로 주시면 됩니다. 다만 GitHub 아이디가 필요합니다. 이 위키는 무엇보다도 그냥 재미를 목적으로 존재한다는 걸 잊지 않아주셨으면 합니다. 너무 진지해지지 마세요. 그럼 재밌게 즐겨주세요. "],
["eb8db0ebb88ced8ab8eba19ced9484.html", "데브트로프", " 데브트로프 데브트로프는 개발자 문화에 연관된 비유들을 수집하는 위키사이트이다. 어셈블리를 쓰던 시절부터 기계학습을 쓰는 요즘에 이르기까지 개발문화는 정말 많은 변화가 있었다. 동시에 놀랄만큼 비슷하기도 하다. 이러한 문화들은 일반 언어로 전달하기 힘이 들기에 비유로 전달되며, 어떤 문화들은 애초에 비유로만 정의되어 있기도 하다. 개발자는 무언가를 개발해내는 직종 모두를 포함한다. 그 결과물은 웹서비스일 수도 하드웨어 제품일 수도 있으며, 개발에 참여하는 사람이 프로그래머일 수도 디자이너나 학생일 수도 있다. 해당 위키 전체는 두 분류로 나눌 수 있다. 첫째는 비유 분류이다. 해당 위키의 주 컨텐츠이며 개발 문화에 관련된 모든 종류의 비유를 수집하는 것을 목표로 한다. 둘째는 결과물 분류이다. 여기서 결과물이란 개발과 관련된 모든 작업 결과물들을 의미한다. 개발 도구, 프로젝트, 개발 방법론, 개발 회사 기타 등등 모두가 이에 포함될 수 있다. 구체적인 예를 들자면 프로그래밍 언어 혹은 애자일 서적과 같은 것이 여기에 해당한다. 비유 분류 문서들을 설명하기 위한 보조 문서 목적으로 작성한다. 해당 위키의 컨텐츠는 The Jargon File에 기반한다. 모델은 TV Tropes. 기타 참고하는 사이트로는 다음의 사이트들이 있다. 기술자용 스택오버플로우 Other Resources Related to the Jargon File WikiWikiWeb "],
["ebb288ec97adebacb8eca09c.html", "번역문제", " 번역문제 번역은 영어를 잘못하는 사람이 편하게 읽을 수 있도록 다시 작성한 글을 의미한다. 즉 익숙한 한국어는 한국어로, 익숙한 영어는 영어로 번역하면 된다. 만약 한국어 혹은 영어가 어색하다면 그건 그게 좋은 번역이 아니라는 것이지 한국어나 영어의 문제가 아니다. https://harfangk.github.io/2016/07/09/stop-translating-programming-terms-ko.html 도 참고하자 "],
["developer-tropes.html", "1 개발자 비유 ", " 1 개발자 비유 "],
["language-lawyer.html", "1.1 언어 전문 변호사", " 1.1 언어 전문 변호사 “아 코딩이 막히네 어쩌면 좋지” “짠 난 언어의 요정이라고 해” “디버깅을 도와주러 오셨군요!” “언어의 요정은 근본없는 니 코딩실력에 대해 잔소리를 하러왔어” Langauge laywer 고수, 그 중에서도 특히 매뉴얼에 대해 능통한 사람을 말한다. 두꺼운 매뉴얼에서 특정 부분을 가리키면서 야 이걸 읽어봤다면 이 정도는 알 수 있었을거 아냐라고 말한다면 백방 이 분류이다. 보통 개발자들은 예제나 프로젝트를 통해서 언어를 배우고 그렇지 않은 사람이라 해도 알기 쉽게 설명한 해설서를 통해 배우기 때문에 매뉴얼, 그것도 특히 스펙을 나열한 매뉴얼을 보는 경우는 드물다. "],
["code-monkey.html", "1.2 코드멍키", " 1.2 코드멍키 "],
["brute-force.html", "1.3 brute force", " 1.3 brute force When in doubt, use brute force - Ken Thomspon 아주 초보적인 프로그래밍 스타일을 가리킨다. 가령 for 문 안쓰고 복붙으로 구현한다거나. 하지만 너무 지나치게 최적화하다가 망할 수도 있다. 그러느니 차라리 brute force 로 구현하는게 백배낫다. 알고리즘 구현방법론 중 하나로도 알려져있다. "],
["BDFL.html", "1.4 자비로운 종신독재자", " 1.4 자비로운 종신독재자 Benevolent dictator for life 의 번역. 보통 오픈소스 프로젝트에 지대한 영향을 끼치는 사람들을 의미한다. 보통 창시자들이 이 역할을 한다. 의사소통에 한계가 있고 오만 사람들이 무보수로 참여하는 개발이다보니 철학에 기반한 결정을 내려야 할 때 아무래도 좀 힘들기 마련이다. 사람에 따라서 군기반장을 맡는 사람도 있다. SHUT THE FUCK UP 기원은 Python 창시자가 자신의 직함에 스스로 저렇게 표기한 것에 따른다. Benevolent dictator 란 사익 (profit)보단 국익 (benefit)을 더 중시하는 독재자를 의미한다. 가령, 아타튀르크, 리콴유, 혹은 티토 같은 사람이 좋은 예제이다. "],
["Gang-of-Four.html", "1.5 Gang of Four", " 1.5 Gang of Four 자바 디자인 패턴을 쓴 네 명의 저자가 자신을 Gang of Four 라고 불렀고 해당 서적은 GOF book이라 호칭했다. 중국 문화대혁명 당시 악명을 떨친 사인방이 어원이다. 보통 %d인방이라고 호칭하는 건 다들 이에서 유래된 표현이다. -->"],
["programming-language-tropes.html", "2 프로그래밍 언어 비유 ", " 2 프로그래밍 언어 비유 "],
["zeroth.html", "2.1 0번째", " 2.1 0번째 일상어로 첫번째를 의미. C나 리스프 같은 초기 언어는 물론 하드웨어부터 1이 아니라 0부터 세는데 익숙해지다보니 저렇게 표현하곤 한다. 가령 0-255 는 일상어로 1-256을 의미한다. "],
["camelCase.html", "2.2 camelCase", " 2.2 camelCase camelCaseIsThePracticeOfWritingCompoundWordsOrPhrasesSuchThatEachWordOrAbbreviationInTheMiddleOfThePhraseBeginsWithACapitalLetterWithNoSpacesOrHyphens - wikipedia 자바에서의 표기법으로 유명하지만, 본래 파스칼에서 사용하던 표기법이다. 그래서 본래 PascalCase 라고 불렸다. 파스칼이 망하면서 같이 망할 줄 알았지만 자바에서 살아남았다. 그리고 자바 계열 언어에서 주로 쓰인다. 위의 예제와 같이 조금만 길어지면 보기 힘들다. snake_case와는 상극으로 여겨지는 경향이 있지만 꼭 그렇지도 않다. R 처럼 둘을 섞어쓰는 언어도 있고, 아예 그 둘의 혼종인 Train-Case 표기법도 있다. "],
["snake-case.html", "2.3 snake_case", " 2.3 snake_case snake_case_is_the_practice_of_writing_compound_words_or_phrases_in_which_the_elements_are_separated_with_one_underscore_character_and_no_spaces - wikipedia C 계열 언어에서 주로 사용. 예외라면 ObjC 가 있다. underscores 대신에 hyphens을 사용하는 경우 kebal-case 라고 한다. "],
["god-language.html", "2.4 갓언어", " 2.4 갓언어 php -->"],
["devculture-tropes.html", "3 개발 문화 비유", " 3 개발 문화 비유 여기서 개발문화가 프로그래머문화만을 이야기하지 않는다는 걸 명심하자. 디지털 제품을 만드는데 있어 프로그래머, 디자이너, 기획자, 관리자 등등의 제품 개발에 참여하는 모든 직군에 공통될만한 문화에 대한 비유들을 정리한다. "],
["deathmarch.html", "3.1 죽음의 행군", " 3.1 죽음의 행군 Death march 건강이나 생명을 돌아가 보지 않는 행군. 이것에 참가하는 것은 많은 경우 죄수나 포로이며, 자주 다수의 사망자를 낸다. "],
["dogfooding.html", "3.2 개밥 먹기", " 3.2 개밥 먹기 Dogfooding "],
["demo-ghost.html", "3.3 데모 귀신", " 3.3 데모 귀신 그렇게 테스트를 해봐도, 아무리 스스로 오래 많이 사용해보아도 안나오던 버그들이 데모때 나오기도 한다. "],
["-.html", "3.4 숟가락 얹기", " 3.4 숟가락 얹기 이른바 협력의 딜레마. "],
["yak-shaving.html", "3.5 들소 털깎기", " 3.5 들소 털깎기 나무를 해야 하는데, 집에있는 도끼의 날이 무뎌져서, 도끼날을 갈 돌을 구해야 하는데, 멀리 동쪽 바닷가에 있는 돌이 좋아서, 돌을 구하러 가야 하는데 동쪽 바닷가에 가려면 개썰매가 필요한데, 개썰매를 만들려면, …, 이런 재귀적 과정을 반복하다가 결국 들소털을 깎아야 한다 까지 도달하고 마는 종류의 현상을 일컫는 표현이다. 원래는 의미없어보이는 활동이지만, 실제로는 꼭 필요한 작업이라는 뜻 많은 프로그래밍 혁신은 “yak shaving” 의 결과로 나타난다. 유닉스의 경우도 다소 단순화시켜 이야기하자면 벨 연구소의 켄 톰슨이 “Space Travel” 게임을 계속 하려고 PDP-7 로 포팅하다가 만들게된 측면이 있다. "],
["Conways-Law.html", "3.6 콘웨이의 법칙", " 3.6 콘웨이의 법칙 If you have four groups working on a compiler, you’ll get a 4-pass compiler Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. If a group of N persons implements a COBOL compiler, there will be N-1 passes. Someone in the group has to be the manager. -->"],
["holywar-tropes.html", "4 전쟁 비유", " 4 전쟁 비유 Holywar, flame war, or religious issue 물론 그래봤자 게시판에서 싸우는 수준이지만. 상황을 잘 고려해서 서로의 처지를 인정하고 각 도구의 장단점을 이해하는 합의가 이루어진다면 이런 일이 일어날 수는 없다. 하지만 잊었는가? 전쟁같은게 일어난다는거 자체가 합의가 안되니까 일어나는거다. 양쪽이 첨예하게 대립하는 분야를 잘 파보면 반드시 흥미로운 것들이 발견된다. vi vs emacs 유닉스 vs ITS 유닉스 vs VMS 유닉스 vs System V C vs Pascal C vs Fortran KDE vs GNOME vim vs elvis Linux vs. [Free|Net|Open]BSD "],
["editorwar.html", "4.1 편집기 전쟁", " 4.1 편집기 전쟁 Editor war Introduction vi와 emacs 의 라이벌 매치. 왜 이런 일이 일어나는가 선택 문제 문제는 어느 상황에서도 돌아가는 무료 도구는 저 두 개 밖에 없다. 어떤 편집기는 윈도우에만 돌아가고 어떤 편집기들은 라이선스를 요구한다. 학습비용 차이 두 도구 모두 엄청 배우기 어렵다. 혼자만 개발한다면 문제가 없지만 팀으로 개발하다보면 탭설정이나 최대라인수 등등의 설정의 제약을 주기 마련인데 그게 특정 편집기 강요로 이어지기도 한다. 당연히 반발로 이어진다. 철학 차이 단순히 선호하는 소프트웨어 취향의 문제 이전에 철학의 차이기도 하다. 하나만 잘하는 도구와 여러 개를 다 지원하는 도구. -->"],
["unclassified-tropes.html", "5 미분류 비유 ", " 5 미분류 비유 "],
["Zawinskis-law.html", "5.1 자윈스키 법칙", " 5.1 자윈스키 법칙 “Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can.” 모든 프로그램은 이메일 기능이 포함될때까지 불어난다. 사용자들은 그런 기능이 없는 프로그램들 대신에 불어난 프로그램을 사용한다. - Jamie Zawinski 프로그램들이 점점 복잡해지고, 그렇게 복잡해진 프로그램들이 사용자들에 의해 사랑받는 현상을 표현. 해당 비유는 이메일이 중요하다는 이야기가 아니다. 소프트웨어 제작에 있어서 사용자들의 요구가 소프트웨어의 개발 방향에 큰 영향을 미친다는 사실을 강조한다. 사용자들은 보통 단순한 기능 혹은 최소한의 기능을 강조하는 경향이 있지만 그건 소프트웨어를 단순하게 만들라기 보다는 그들의 워크플로우를 단순하게 만들어달라는 걸 의미한다. 이메일 클라이언트 프로그램이 아닌 이상 일반적인 프로그램에 이메일 기능은 고려대상이 아니지만, 사용자 입장에선 그거 알게 뭔가. 자윈스키는 전설적인 개발자로 추후 따로 페이지 작성필요. "],
["Brookss-Law.html", "5.2 브룩스의 법칙", " 5.2 브룩스의 법칙 “지체되는 소프트웨어 개발 프로젝트에 인력을 더하는 것은 개발을 늦출 뿐이다”라고 주장한 법칙. “임산부가 아무리 많아도, 아이를 낳는 데에는 9개월이 걸린다.” 라고 덧붙이기도 했다. IBM 의 OS/360 프로젝트 매니저였던 프레드 브룩스가 맨먼스 미신에서 주장한 글이다. 그는 아예 시간 복잡도를 내기도 했다. “\\(N\\) 명의 프로그래머들에게 작업량을 나누는 시간복잡도는 \\(O(N)\\)이지만, 프로그래머들 간의 의사소통 비용과 결과물을 제대로 합치는데에는 \\(O(N^2)\\)의 시간이 수행된다.” 프로그래머라면 몸으로 이걸 체득하고 있지만 매니저들은 종종 까먹곤 한다. 성당과 시장에서 이 논리는 반박된다. 해당 서적은 오픈 소스의 성공을 브룩스 법칙에 대한 반례로 제시하며, 제대로 된 커뮤니티에 의해 돌아간다면, 매우 많은 수의 프로그래머들을 통해서 효율적으로 수행되는 시장과 같이 돌아간다고 주장한다. "],
["bot.html", "5.3 bot", " 5.3 bot "],
["BLOB.html", "5.4 BLOB", " 5.4 BLOB Binary Large OBject "],
["C-ampersand-C.html", "5.5 C&amp;C", " 5.5 C&amp;C Coffee &amp; Cats "],
["evil.html", "5.6 evil", " 5.6 evil 똑똑한 사람이 잘못된 방향에 꽂혀서 멋지지만 이상한 설계 혹은 코딩을 한 경우 "],
["rude.html", "5.7 rude", " 5.7 rude 한 마디로 다른 사람에게 피해를 주는 구현. 다양한 이유가 있는데 가령 돌아가는 프로그램이 다른 프로그램까지 죽이거나, 인수자 혹은 리뷰어 입장에서 읽기 힘든 코드이거나, 혼자 툭튀어서 프로젝트 진행에 유독 많은 구현 비용을 요구하게 되는 경우. evil이 실력보다는 잘못된 결정의 문제라면, rude는 실력과 연관되는 비유이다. "],
["under-the-hood.html", "5.8 under the hood", " 5.8 under the hood GUI 혹은 하드웨어만 봐서는 잘 드러나지 않는 구현의 핵심을 소개할 때 쓰는 표현. 일부러 영어 표현 그대로 작성. "],
["user-friendly.html", "5.9 user-friendly", " 5.9 user-friendly 사용자를 위한다는 명목. 정작 그 사용자는 자신이 뭘 원하는지 확실하게 모르기 때문에 제품을 완성하기가 무척 어렵게 된다. 프로그래머는 저 표현은 개발의 주도권을 넘겨준다는 의미로 받아들이고, 해당 주장은 조소와 비아냥의 대상이 되곤 한다. "],
["vanila.html", "5.10 바닐라", " 5.10 바닐라 vanilla 옛날엔 아이스크림이 바닐라를 기초로 뭐가 추가되는 식으로 소비자들에게 제공되었다. 한 마디로 순정판. "],
["RTFM.html", "5.11 RTFM", " 5.11 RTFM Read The Fucking Manual 시간 낭비인 쓸때없는 질문들을 까기 위해서 사용하곤 하는 문장. "],
["Don-t-do-that-then.html", "5.12 그럼 하지 말라고", " 5.12 그럼 하지 말라고 Don’t do that then! "],
["BSOD.html", "5.13 죽음의 블루스크린", " 5.13 죽음의 블루스크린 Blue Screen of Death 윈도우즈의 실행에 문제가 생겼을때 보여주는 화면. 갑자기 퍼런 화면과 함께 알아먹지 못할 경고문구들을 막 출력함으로서 사람을 실겁하게 만든다. 재부팅 말고는 답이 없기 때문에 그 전에 저장하지 않았던 작업물들은 모두 잃어버리게 된다. 유독 윈도우에 반감이 강한 프로그래머 커뮤니티 뿐 아니라 디자이너 등의 모든 개발자가 공감하는 주제. "],
["wintendo.html", "5.14 윈텐도", " 5.14 윈텐도 Wintendo 게임용으로만 사용하기 위해 구입한 윈도우 PC를 의미한다. 즉, 자신은 일반적인 컴퓨터 작업들을 리눅스나 맥으로 처리한다는 걸 강조하는 것. 이런 자세가 지나치면 리눅스에 오픈오피스를 쓰면 되는데 왜 윈도우에 오피스를 쓰느냐까지 갈 수도 있다. "],
["This-time-for-sure.html", "5.15 이번엔 진짜 됩니다", " 5.15 이번엔 진짜 됩니다 This time, for sure! 사망플래그 특히 주변에 사람을 세워놓고 디버깅하면 좀 미안하기도 하고해서 저런 주문을 자주 외우곤 한다. "],
["workaround.html", "5.16 workaround", " 5.16 workaround 개발시 필요에 의해 특정 문제를 회피하는 구현 방안이다. 추후 제대로 된 방식으로 수정될 대상이기도. 버그 수정이 workaround 인지 fix 인지 구분하는 것은 코드리뷰에서 중요한 포인트 중 하나이다. 그럼에도 보통 hotfix 가 실은 hot-workaround인 것이 현실. 비슷한 용어로 kluge 참조. "],
["metasyntactic-variable.html", "5.17 metasyntactic variable", " 5.17 metasyntactic variable https://en.wikipedia.org/wiki/Metasyntactic_variable http://catb.org/jargon/html/M/metasyntactic-variable.html "],
["critical-mass.html", "5.18 critical mass", " 5.18 critical mass In physics, the minimum amount of fissionable material required to sustain a chain reaction. Of a software product, describes a condition of the software such that fixing one bug introduces one plus epsilon bugs. When software achieves critical mass, it can never be fixed; it can only be discarded and rewritten. "],
["os.html", "6 OS ", " 6 OS "],
["macintrash.html", "6.1 Macintrash", " 6.1 Macintrash The Apple Macintosh, as described by a hacker who doesn’t appreciate being kept away from the real computer by the interface. "],
["macintoy.html", "6.2 Macintoy", " 6.2 Macintoy -->"],
["books.html", "7 서적", " 7 서적 Aluminum Book, Camel Book, Cinderella Book, daemon book, Dragon Book, Orange Book, Purple Book, Wizard Book, and bible "],
["cathedral-bazaar.html", "7.1 성당과 시장", " 7.1 성당과 시장 에릭 레이몬드가 1997년, 리눅스의 대성공을 분석하고 작성한 에세이. 브룩스 법칙을 아래와 같이 정면 반박하기도 한다. 사용자들을 공동개발자로 생각하면 코드가 다른 어떤 방법보다도 빠른 속도로 개선되며 효율적으로 디버깅할 수 있다. 개발 조정자가 최소한 인터넷만큼 좋은 매체를 가지고 있으며 강제력을 사용하지 않고 어떻게 이끌어야 할 지 알고 있다면 한 명 보다는 여러명의 리더가 필연적으로 더 낫다. 한국어 번역이 있다. 원문은 이곳에서 확인해보자. -->"],
["websites.html", "8 웹사이트 ", " 8 웹사이트 "],
["Twitter.html", "8.1 트위터", " 8.1 트위터 Twitter "],
["GitHub.html", "8.2 GitHub", " 8.2 GitHub "],
["WikiWikiWeb.html", "8.3 WikiWikiWeb", " 8.3 WikiWikiWeb http://wiki.c2.com/ https://github.com/WardCunningham/remodeling 8.3.1 Tropes CamelCase "],
["programmers.html", "9 프로그래머 ", " 9 프로그래머 "],
["Eric-Raymond.html", "9.1 에릭 레이몬드", " 9.1 에릭 레이몬드 Eric Steven Raymond -->"]
]
