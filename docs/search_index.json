[
["unclassified-tropes.html", "9 미분류 비유 ", " 9 미분류 비유 "],
["Turing-test.html", "9.1 튜링 테스트", " 9.1 튜링 테스트 Turing test 자신과 대화하는 상대는 과연 사람일까 인공지능일까? 해당 인공지능의 성숙도를 채팅을 통해 확인하는 가설검정 방법을 의미한다. "],
["Carmack-test.html", "9.2 카맥 테스트", " 9.2 카맥 테스트 존 카맥의 업적 — 디스플레이와 입력장치가 있는 모든 컴퓨터라고 불릴 수 있을 것 같은 장치가 컴퓨터인지 확인 하는 수단으로 쓰이는 둠을 개발. "],
["airplane-rule.html", "9.3 비행기 법칙", " 9.3 비행기 법칙 Airplane rule “Complexity increases the possibility of failure; a twin-engine airplane has twice as many engine problems as a single-engine airplane.” 단순한 디자인이 견고한 소프트웨어를 만든다는 이야기. "],
["Infinite-loop.html", "9.4 무한루프", " 9.4 무한루프 Infinite loop "],
["Alderson-loop.html", "9.5 Alderson loop", " 9.5 Alderson loop Alderson loop GUI의 구현 문제로 인해서 무한루프에 빠지는 경우를 말한다. 지금은 Infinite loop 이긴 인데 exit condition 을 만들어놨지만 어쩌다보니 해당 컨디션이 발동하지 않는 경우를 말한다. "],
["Zawinskis-law.html", "9.6 자윈스키 법칙", " 9.6 자윈스키 법칙 “Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can.” 모든 프로그램은 이메일 기능이 포함될때까지 불어난다. 사용자들은 그런 기능이 없는 프로그램들 대신에 불어난 프로그램을 사용한다. - Jamie Zawinski 프로그램들이 점점 복잡해지고, 그렇게 복잡해진 프로그램들이 사용자들에 의해 사랑받는 현상을 표현. 해당 비유는 이메일이 중요하다는 이야기가 아니다. 소프트웨어 제작에 있어서 사용자들의 요구가 소프트웨어의 개발 방향에 큰 영향을 미친다는 사실을 강조한다. 사용자들은 보통 단순한 기능 혹은 최소한의 기능을 강조하는 경향이 있지만 그건 소프트웨어를 단순하게 만들라기 보다는 그들의 워크플로우를 단순하게 만들어달라는 걸 의미한다. 이메일 클라이언트 프로그램이 아닌 이상 일반적인 프로그램에 이메일 기능은 고려대상이 아니지만, 사용자 입장에선 그거 알게 뭔가. 자윈스키는 전설적인 개발자로 추후 따로 페이지 작성필요. "],
["Brookss-Law.html", "9.7 브룩스의 법칙", " 9.7 브룩스의 법칙 “지체되는 소프트웨어 개발 프로젝트에 인력을 더하는 것은 개발을 늦출 뿐이다”라고 주장한 법칙. “임산부가 아무리 많아도, 아이를 낳는 데에는 9개월이 걸린다.” 라고 덧붙이기도 했다. IBM 의 OS/360 프로젝트 매니저였던 프레드 브룩스가 맨먼스 미신에서 주장한 글이다. 그는 아예 시간 복잡도를 내기도 했다. “\\(N\\) 명의 프로그래머들에게 작업량을 나누는 시간복잡도는 \\(O(N)\\)이지만, 프로그래머들 간의 의사소통 비용과 결과물을 제대로 합치는데에는 \\(O(N^2)\\)의 시간이 수행된다.” 프로그래머라면 몸으로 이걸 체득하고 있지만 매니저들은 종종 까먹곤 한다. 성당과 시장에서 이 논리는 반박된다. 해당 서적은 오픈 소스의 성공을 브룩스 법칙에 대한 반례로 제시하며, 제대로 된 커뮤니티에 의해 돌아간다면, 매우 많은 수의 프로그래머들을 통해서 효율적으로 수행되는 시장과 같이 돌아간다고 주장한다. "],
["bot.html", "9.8 bot", " 9.8 bot "],
["BLOB.html", "9.9 BLOB", " 9.9 BLOB Binary Large OBject "],
["RTFM.html", "9.10 RTFM", " 9.10 RTFM Read The Fucking Manual 시간 낭비인 쓸때없는 질문들을 까기 위해서 사용하곤 하는 문장. "],
["BSOD.html", "9.11 죽음의 블루스크린", " 9.11 죽음의 블루스크린 Blue Screen of Death 윈도우즈의 실행에 문제가 생겼을때 보여주는 화면. 갑자기 퍼런 화면과 함께 알아먹지 못할 경고문구들을 막 출력함으로서 사람을 실겁하게 만든다. 재부팅 말고는 답이 없기 때문에 그 전에 저장하지 않았던 작업물들은 모두 잃어버리게 된다. 유독 윈도우에 반감이 강한 프로그래머 커뮤니티 뿐 아니라 디자이너 등의 모든 개발자가 공감하는 주제. "],
["wintendo.html", "9.12 윈텐도", " 9.12 윈텐도 Wintendo 게임용으로만 사용하기 위해 구입한 윈도우 PC를 의미한다. 즉, 자신은 일반적인 컴퓨터 작업들을 리눅스나 맥으로 처리한다는 걸 강조하는 것. 이런 자세가 지나치면 리눅스에 오픈오피스를 쓰면 되는데 왜 윈도우에 오피스를 쓰느냐까지 갈 수도 있다. "],
["This-time-for-sure.html", "9.13 이번엔 진짜 됩니다", " 9.13 이번엔 진짜 됩니다 “Hey Rocky! Watch me pull a rabiit out of my hat!” “But that trick never works!” “This time for sure! Presto!” (Pulls out %s) RAWWWWR “Oops! Wrong hat!” https://www.youtube.com/watch?v=pc4IFIXcDcs 사망플래그 애니메이션의 주인공이 매번 되지도 않는 마술한답시고 도전하는데 친구의 계속 되는 면박에도 “This time for sure!” 를 외치면서 시도하고 또 망하는 패턴을 보여주는데에서 유래. 특히 주변에 사람을 세워놓고 디버깅하면 좀 미안하기도 하고해서 저런 주문을 자주 외우곤 한다. "],
["bus-factor.html", "9.14 버스 팩터", " 9.14 버스 팩터 bus factor 혹은 truck factor “만약에 우리 팀들 중 일부가 트럭에 치여버렸다고 치자. 과연 프로젝트는 굴러갈 수 있을까?” 뭐 딱히 버스거나 트럭일 필요는 없다. 퇴직하거나, 이직하거나 혹은 아이를 가지거나, 그냥 사람이 갑자기 변해버렸다거나 여러 가지 요인이 있을 수 있다. 중요한 것은 프로젝트 정보가 얼마나 공유되며, 구현 및 유지보수를 책임질 수 있는 능력이 어떻게 분배되어 있느냐는 것이다. 즉, 이 질문은 프로젝트 수행팀의 성숙도를 평가한다. 해당 factor 가 높을 수록 해당 프로젝트는 안정적. 많은 오픈소스가 이 경우에 해당한다. 이를 다룬 블로그를 확인해보자. "]
]
