[
["index.html", "환영합니다", " 환영합니다 데브트로프 에 오신 것을 환영합니다. 데브트로프 (Dev Tropes) 혹은 개발자 비유도감은 개발자 문화에 연관된 비유들을 수집 및 정리하는 위키입니다. 네이버 국어사전에 따르면 비유란 어떤 현상이나 사물을 직접 설명하지 아니하고 다른 비슷한 현상이나 사물에 빗대어서 설명하는 걸 의미합니다. 비유와 예제를 활용하면 뜻을 보다 쉽게 전달할 수 있지요. 영어로 idiomatic metaphor, folklore 에 해당하는 것들을 말합니다. 해당 위키는 누구나 수정가능하며, 문의는 여기로 주시면 됩니다. 다만 GitHub 아이디가 필요합니다. 이 위키는 무엇보다도 그냥 재미를 목적으로 존재한다는 걸 잊지 않아주셨으면 합니다. 너무 진지해지지 마세요. 그럼 재밌게 즐겨주세요. "],
["eb8db0ebb88ced8ab8eba19ced9484.html", "데브트로프", " 데브트로프 데브트로프는 개발자 문화에 연관된 비유들을 수집하는 위키사이트이다. 어셈블리를 쓰던 시절부터 기계학습을 쓰는 요즘에 이르기까지 개발문화는 정말 많은 변화가 있었다. 동시에 놀랄만큼 비슷하기도 하다. 이러한 문화들은 일반 언어로 전달하기 힘이 들기에 비유로 전달되며, 어떤 문화들은 애초에 비유로만 정의되어 있기도 하다. 개발자는 무언가를 개발해내는 직종 모두를 포함한다. 그 결과물은 웹서비스일 수도 하드웨어 제품일 수도 있으며, 개발에 참여하는 사람이 프로그래머일 수도 디자이너나 학생일 수도 있다. 해당 위키 전체는 두 분류로 나눌 수 있다. 첫째는 비유 분류이다. 해당 위키의 주 컨텐츠이며 개발 문화에 관련된 모든 종류의 비유를 수집하는 것을 목표로 한다. 둘째는 결과물 분류이다. 여기서 결과물이란 개발과 관련된 모든 작업 결과물들을 의미한다. 개발 도구, 프로젝트, 개발 방법론, 개발 회사 기타 등등 모두가 이에 포함될 수 있다. 구체적인 예를 들자면 프로그래밍 언어 혹은 애자일 서적과 같은 것이 여기에 해당한다. 비유 분류 문서들을 설명하기 위한 보조 문서 목적으로 작성한다. 해당 위키의 컨텐츠는 The Jargon File에 기반한다. 모델은 TV Tropes. 기타 참고하는 사이트로는 다음의 사이트들이 있다. 위키피디아 SW folklore 위키피디아 플밍 folklore 위키피디아 컴퓨터용어 기술자용 스택오버플로우 Other Resources Related to the Jargon File WikiWikiWeb pcmag encyclopedia "],
["ebb288ec97adebacb8eca09c.html", "번역문제", " 번역문제 번역은 영어를 잘못하는 사람이 편하게 읽을 수 있도록 다시 작성한 글을 의미한다. 즉 익숙한 한국어는 한국어로, 익숙한 영어는 영어로 번역하면 된다. 만약 한국어 혹은 영어가 어색하다면 그건 그게 좋은 번역이 아니라는 것이지 한국어나 영어의 문제가 아니다. https://harfangk.github.io/2016/07/09/stop-translating-programming-terms-ko.html 도 참고하자 "],
["developer-tropes.html", "1 개발자 비유", " 1 개발자 비유 오픈소스 프로젝트건 스타트업 혹은 대기업 등 모두에서 공통적으로 발견되는 일반적인 유형들이 있다. "],
["language-lawyer.html", "1.1 언어 전문 변호사", " 1.1 언어 전문 변호사 “아 코딩이 막히네 어쩌면 좋지” “짠 난 언어의 요정이라고 해” “디버깅을 도와주러 오셨군요!” “언어의 요정은 근본없는 니 코딩실력에 대해 잔소리를 하러왔어” Langauge laywer 고수, 그 중에서도 특히 매뉴얼에 대해 능통한 사람을 말한다. 두꺼운 매뉴얼에서 특정 부분을 가리키면서 야 이걸 읽어봤다면 이 정도는 알 수 있었을거 아냐라고 말한다면 백방 이 분류이다. 보통 개발자들은 예제나 프로젝트를 통해서 언어를 배우고 그렇지 않은 사람이라 해도 알기 쉽게 설명한 해설서를 통해 배우기 때문에 매뉴얼, 그것도 특히 스펙을 나열한 매뉴얼을 보는 경우는 드물다. "],
["code-monkey.html", "1.2 코드멍키", " 1.2 코드멍키 "],
["brute-force.html", "1.3 brute force", " 1.3 brute force When in doubt, use brute force - Ken Thomspon 아주 초보적인 프로그래밍 스타일을 가리킨다. 가령 for 문 안쓰고 복붙으로 구현한다거나. 하지만 너무 지나치게 최적화하다가 망할 수도 있다. 그러느니 차라리 brute force 로 구현하는게 백배낫다. 알고리즘 구현방법론 중 하나로도 알려져있다. "],
["BDFL.html", "1.4 자비로운 종신독재자", " 1.4 자비로운 종신독재자 Benevolent dictator for life 의 번역. 보통 오픈소스 프로젝트에 지대한 영향을 끼치는 사람들을 의미한다. 보통 창시자들이 이 역할을 한다. 의사소통에 한계가 있고 오만 사람들이 무보수로 참여하는 개발이다보니 철학에 기반한 결정을 내려야 할 때 아무래도 좀 힘들기 마련이다. 사람에 따라서 군기반장을 맡는 사람도 있다. SHUT THE FUCK UP 기원은 Python 창시자가 자신의 직함에 스스로 저렇게 표기한 것에 따른다. Benevolent dictator 란 사익 (profit)보단 국익 (benefit)을 더 중시하는 독재자를 의미한다. 가령, 아타튀르크, 리콴유, 혹은 티토 같은 사람이 좋은 예제이다. "],
["Gang-of-Four.html", "1.5 Gang of Four", " 1.5 Gang of Four 자바 디자인 패턴을 쓴 네 명의 저자가 자신을 Gang of Four 라고 불렀고 해당 서적은 GOF book이라 호칭했다. 중국 문화대혁명 당시 악명을 떨친 사인방이 어원이다. 보통 %d인방이라고 호칭하는 건 다들 이에서 유래된 표현이다. "],
["dumb-nerds.html", "1.6 Dumb Nerds", " 1.6 Dumb Nerds 너드들은 보통 개발을 잘하는 경우가 많다. 하지만 너드라고 다 개발을 잘하는 것은 아니다. 즉, 적성이 있는 거랑 역량이 있는 것은 다른 이야기이다. 컴퓨터랑 친해서 매일 끼고 살긴 하는데 딱히 그다지 실력이 없을지도 모른다. 실수나 잘못에서 배우지 못하고, 애초에 뭐가 실수인지도 모르기도 한다. 그래서 팀 방향을 따라가는데에도 힘들어하고, 자신의 문제를 해결할 능력도 없다. "],
["The-Mansplainer.html", "1.7 맨스플레이너", " 1.7 맨스플레이너 The Mansplainer 특정 문제 하나에 대해 상담하러 갔는데 완전히 기본적인 거부터 설명한다거나 아무튼 질문하는 사람이 당연히 알고 있는 그 모든 것들에 대해서 설명하곤 하는 사람을 말한다. 여성, 신입사원이나 인턴 등등에 대한 선입견에 의해서 일어나는데 당연히 여성, 신입사원이나 인턴이 평균 이상으로 실력이 좋은 일은 비일비재하게 일어난다. "],
["QA-Killjoy.html", "1.8 QA Killjoy", " 1.8 QA Killjoy The QA Killjoy 개발중인 프로그램은 물론 문제가 많다. 그걸 필요이상으로 부풀려서 아예 쓰지도 못할 물건처럼 취급하고 거기에서 희열을 느끼는 사람을 말한다. "],
["Anti-Microsoft-crusader.html", "1.9 반마소 십자군", " 1.9 반마소 십자군 90년대와 2000년대 초, 마이크로소프트는 오픈소스에서 공공의 적 1번이었다. 리눅스는 윈도우, 모질라는 인터넷 익스플로러를 몰아내려 전쟁을 벌였다. 그리고 마이크로소프트의 한 임원은 리눅스를 ’반미국적’이라고 비난했다. 마이크로소프트가 자체 오픈소스 코드를 발표하는 등 변화를 보이면서 많은 사람들의 적대감이 사라졌다. 그러나 전부 다 그런 것은 아니다. "],
["Bike-shedder.html", "1.10 자전거 거치대", " 1.10 자전거 거치대 Bike-shedder 영국에서 실제 발생한 사건에서 유래한 ’사소함의 법칙(Parkinson’s Law of Trivialtiy)’이 적용되는 사람들. 과거 영국에 원자력 발전소가 건설됐을 때, 이를 승인하는 책임을 진 위원회는 원자로보다는 발전소 옆에 설치할 자전거 거치대의 색상 결정에 더 많은 시간을 투자했었다. 원자로에 정통한 사람들은 극소수였기 때문에 대부분 자전거 거치대 같이 그나마 끼어들 수 있는데에 토론 시간을 낭비했기 때문이다. 리눅스 4.0의 발표가 좋은 예제이다. 버그 수정 같이 유용한 문제보다는 버전 3.19 개정판에 버전 4.0이라는 명칭을 붙이는 것이 타당한지 논의한 내용이 더 많다. "],
["opensource-zealot.html", "1.11 오픈소스 광신도", " 1.11 오픈소스 광신도 오픈소스가 특정 프로그래밍 프로젝트를 위한 여러 대안 가운데 하나가 아니라 이데올로기나 라이프스타일이라고 생각하는 개발자 부류가 있다. 개인 생산성이 떨어지는 경우에도 오픈소스를 적용할 부류다. 이런 부류의 오픈소스 개발자가 관리직일 경우 문제가 된다. 회사의 투자 수익보다 오픈소스 철학을 우선시 하기 때문이다. "],
["Codeholic.html", "1.12 나는 코딩만 한다", " 1.12 나는 코딩만 한다 Codeholic 사람들과 어울리지 않고, 회의에도 참석하지 않으며, 비즈니스 측면의 필요사항은 거론하지 않는 부류의 사람들. 이들은 ‘양날의 검’ 같은 집중력이 특징이다. 세상과 격리되어야 극도로 생산성을 발휘할 수 있다. 그리고 그들이 그 ‘세상’을 위해 코딩을 한다. -->"],
["programming-language-tropes.html", "2 프로그래밍 언어 비유 ", " 2 프로그래밍 언어 비유 "],
["helloworld.html", "2.1 hello, world", " 2.1 hello, world hello, world 혹은 헬로월드 #include &lt;stdio.h&gt; main( ) { printf(&quot;hello, world\\n&quot;); } 브라이언 케니건이 The C Programming Language (K&amp;R) 서적 (1974) 에서 작성한 hello, world 프로그램. 위와 같이 정석은 hello, world 지만 뭐 애초에 stdout 을 사용해본다는데 의미가 있기 때문에 helloworld, Hello World! , 나 아이돌 그만둘래!, asdfsdfdsf 등의 여러가지 구현 방식을 볼 수 있다. 프로그래밍 언어를 연습하기 위해 최초로 작성해보는 프로그램. 프로그래밍 언어 자체보다도 개발환경을 제대로 인스톨했는지, IDE를 제대로 다룰 수 있는지, 혹은 컴파일 및 결과물 실행 방식을 제대로 이해하고 있는지가 더 관건인 테스트 프로그램에 더 가깝다. 당시의 개발환경으로는 초보자에게 쉽지않은 과제였다. 저 최초의 헬로월드를 구현하기 위해선 우선 1) 운영체제를 설치할 수 있어야 했고, 2) C 를 설치할 수 있어야 했으며, 3) 그리고 libc 와 연동시켜서 컴파일하는 등의 환경 설정을 해야했다. 뭐 빌드가 쉬운 일이 아니었던 예전의 이야기이다. 요즘의 언어들은 아예 애초에 기본으로 운영체제 내부에 기본 설치되어 있는 경우가 많고, 그렇지 않더라도 패키지매니저 등으로 매우 간단히 설치할 수 있다. 프로그램 자체도 그냥 대화창 열어서 한줄치면 interactive 하게 결과 나온다. Esoteric language 에 한정해서 그 기괴함을 알리기 위한 광고효과로 쓰기도 한다. 프로그래밍 언어 뿐 아니라 아주 기초적인 동작을 확인하는 테스트 프로그램들도 stdout 으로 결과출력하는 식으로 동작하기에 역시 헬로월드 프로그램으로 불리기도 한다. 가령 ESA 의 로제타가 구동 완료 메세지를 헬로월드라고 트위터에 전송하는 것으로 시행하였다. 개발 환경과 생산성이 좋아진 요즘에는 단순한 stdout 출력은 잘 쓰이지 않는다. 가령 3분만에 게시물 만들기 같은 식으로 과거와 달리 엄청난 생산성을 보여주는 프로그램들이 이를 대체하고 있다. 하지만 눈에 보이는 결과물을 통해 소프트웨어에 익숙해지게 한다는 본질은 변하지 않는다. 2.1.1 같이 보기 헬로월드 언어별 모음 나 아이돌 그만둘래! "],
["zeroth.html", "2.2 0번째", " 2.2 0번째 일상어로 첫번째를 의미. C나 리스프 같은 초기 언어는 물론 하드웨어부터 1이 아니라 0부터 세는데 익숙해지다보니 저렇게 표현하곤 한다. 가령 0-255 는 일상어로 1-256을 의미한다. "],
["camelCase.html", "2.3 camelCase", " 2.3 camelCase camelCaseIsThePracticeOfWritingCompoundWordsOrPhrasesSuchThatEachWordOrAbbreviationInTheMiddleOfThePhraseBeginsWithACapitalLetterWithNoSpacesOrHyphens - wikipedia 자바에서의 표기법으로 유명하지만, 본래 파스칼에서 사용하던 표기법이다. 그래서 본래 PascalCase 라고 불렸다. 파스칼이 망하면서 같이 망할 줄 알았지만 자바에서 살아남았다. 그리고 자바 계열 언어에서 주로 쓰인다. 위의 예제와 같이 조금만 길어지면 보기 힘들다. snake_case와는 상극으로 여겨지는 경향이 있지만 꼭 그렇지도 않다. R 처럼 둘을 섞어쓰는 언어도 있고, 아예 그 둘의 혼종인 Train-Case 표기법도 있다. "],
["snake-case.html", "2.4 snake_case", " 2.4 snake_case snake_case_is_the_practice_of_writing_compound_words_or_phrases_in_which_the_elements_are_separated_with_one_underscore_character_and_no_spaces - wikipedia C 계열 언어에서 주로 사용. 예외라면 ObjC 가 있다. "],
["kebab-case.html", "2.5 kebab-case", " 2.5 kebab-case snake_case와 유사하나underscores 대신에 hyphens을 사용하는 경우 kebab-case 라고 한다. 주로 Lisp 에서 사용한다. "],
["god-language.html", "2.6 갓언어", " 2.6 갓언어 파이썬은 망해가는 언어이고 PHP는 부활해서 1위를 탈환할 언어다 완벽한 언어. 해당 언어외 다른 언어를 고려할 여지가 없다는 식의 압도적인 강점을 보유하고 있는 언어를 말한다. 실제로는 엉망인 언어를 비꼬는 경우가 많다. 참조 "],
["php.html", "2.7 php", " 2.7 php http://noraesae.github.io/PHP-a-fractal-of-bad-design-kr/ https://www.tokyobranch.net/archives/6693 -->"],
["devculture-tropes.html", "3 개발 문화 비유", " 3 개발 문화 비유 여기서 개발문화가 프로그래머문화만을 이야기하지 않는다는 걸 명심하자. 디지털 제품을 만드는데 있어 프로그래머, 디자이너, 기획자, 관리자 등등의 제품 개발에 참여하는 모든 직군에 공통될만한 문화에 대한 비유들을 정리한다. "],
["deathmarch.html", "3.1 죽음의 행군", " 3.1 죽음의 행군 Death march 건강이나 생명을 돌아가 보지 않는 행군. 이것에 참가하는 것은 많은 경우 죄수나 포로이며, 자주 다수의 사망자를 낸다. "],
["dogfooding.html", "3.2 개밥 먹기", " 3.2 개밥 먹기 Dogfooding "],
["demo-ghost.html", "3.3 데모 귀신", " 3.3 데모 귀신 그렇게 테스트를 해봐도, 아무리 스스로 오래 많이 사용해보아도 안나오던 버그들이 데모때 나오기도 한다. "],
["-.html", "3.4 숟가락 얹기", " 3.4 숟가락 얹기 이른바 협력의 딜레마. "],
["yak-shaving.html", "3.5 들소 털깎기", " 3.5 들소 털깎기 나무를 해야 하는데, 집에있는 도끼의 날이 무뎌져서, 도끼날을 갈 돌을 구해야 하는데, 멀리 동쪽 바닷가에 있는 돌이 좋아서, 돌을 구하러 가야 하는데 동쪽 바닷가에 가려면 개썰매가 필요한데, 개썰매를 만들려면, …, 이런 재귀적 과정을 반복하다가 결국 들소털을 깎아야 한다 까지 도달하고 마는 종류의 현상을 일컫는 표현이다. 원래는 의미없어보이는 활동이지만, 실제로는 꼭 필요한 작업이라는 뜻 많은 프로그래밍 혁신은 “yak shaving” 의 결과로 나타난다. 유닉스의 경우도 다소 단순화시켜 이야기하자면 벨 연구소의 켄 톰슨이 “Space Travel” 게임을 계속 하려고 PDP-7 로 포팅하다가 만들게된 측면이 있다. "],
["Conways-Law.html", "3.6 콘웨이의 법칙", " 3.6 콘웨이의 법칙 If you have four groups working on a compiler, you’ll get a 4-pass compiler Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. If a group of N persons implements a COBOL compiler, there will be N-1 passes. Someone in the group has to be the manager. "],
["Reinventing-the-wheel.html", "3.7 바퀴부터 다시 만들기", " 3.7 바퀴부터 다시 만들기 이미 있는 것을 가져다 쓰라는 이야기 즉 Best practice 를 잘 연구하고 찾아서 사용하라는 이야기이다. 바퀴를 다시 만드는 경우는 여러 이유가 있다. Not invented here: 해당 조직에서 만들어지지 않은 구현물은 과소평가되는 경향이 있다. Design around: 특허를 피하기 위한 구현 접근 https://pbs.twimg.com/media/CMyiLuKUwAA6l-V.jpg "],
["Stovepipe-system.html", "3.8 Stovepipe system", " 3.8 Stovepipe system systems procured and developed to solve a specific problem, characterized by a limited focus and functionality, and containing data that cannot be easily shared with other systems 공유하라고 만들어놓은 시스템 인데 오히려 정보 교류를 막고 독점하는 용도로 활용되는 시스템을 가리키는 말. "],
["Not-invented-here.html", "3.9 여기서 나온게 아니잖아", " 3.9 여기서 나온게 아니잖아 혹은 NIH 증후군. "],
["Reinventing-the-square-wheel.html", "3.10 네모바퀴 만들기", " 3.10 네모바퀴 만들기 쉽고 간단하겠지하고 대충 만들면서 접근하다가 바로 anti pattern 에 빠져서 시간 낭비하는 경우를 의미. 관련자료 조사를 안하면 흔히 빠지곤 하는 초보적인 실수를 지적. "],
["Standing-on-the-shoulders-of-giants.html", "3.11 거인의 어깨에 올라섰을 뿐이지요", " 3.11 거인의 어깨에 올라섰을 뿐이지요 “우리는 거인의 어깨 위에 올라선 난쟁이들과 같기 때문에 고대인들보다 더 많이 그리고 더 멀리 볼 수 있다.” — 장 폴 샤르트르 “내가 뭔가를 성취했다고 한다면 그건 거인의 어깨에 올라섰기 때문이지요” — 뉴턴 위대한 성취에는 천재 개발자들만이 강조되기 쉽다. 이를 경계하고 동시에 수많은 동업자들의 직접 간접적인 기여가 있었음을 강조하기 위한 비유. 거대한 업적을 일부의 천재들에게 돌리는 것은 자연스러운 현상이나, 모든 것이 소수의 엘리트가 이룩했다고 생각하거나 혹은 똑똑한 사람들만이 이 산업에 기여할 수 있다는 사고는 잘못된 것이다. 실제로 위대한 일을 성취한 천재 개발자들이 얼마나 되는지 세어보자. 그리고 개발이라는 이 분야가 과연 그들만으로 돌아갈지 생각해보자. 성당과 시장에서 나오듯이, 소프트웨어 개발은 수많은 기여자들을 통해 성장해왔다. 한국어로 흔히 거인의 어깨라고 번역되지만 영어로는 거인“들”의 어깨“들” (the shoulders of giants) 이라고 표현한다. 이 말은 천재들이 자신의 겸손을 나타내는 말이기도 하지만, 동시에 수많은 사람들이 모여 수많은 거인들과 같은 업적을 이룬다는 말이기도 하다. http://rayspace.tistory.com/543 "],
["Rube-Goldberg-machine.html", "3.12 루드 골드버그식 기계", " 3.12 루드 골드버그식 기계 http://www.theleonardo.org/wp-content/uploads/2015/05/rube-goldberg.jpg 되게 간단한 문제를 굉장히 복잡한 방법으로 해결하는 제품을 의미한다. 루드 골드버그라는 만화가가 흔히 만화 내에 등장시키곤 했던 기계들이 어원 "],
["Anti-pattern.html", "3.13 Anti-pattern", " 3.13 Anti-pattern 해당 문제를 더 어렵고 비효율적으로 푸는 방법론 evil Rube Goldberg machine "],
["Brogrammer.html", "3.14 브로그래머", " 3.14 브로그래머 Brogrammer (BROther + proGRAMMER) 혹은 techbro Bro 의 성향을 가진 프로그래머 3.14.1 배경 개발자들 수요가 늘어나고 소득수준이 높아지고 결정적으로 그 이외의 직업들 숫자 자체가 줄어들면서 기존 Nerd 혹은 Geek 들이 모여있던 세계에 Bro 들이 진입하기 시작한다. 이성들에게 마초짓하고 육체미에 신경쓰고 파티에 열중하는 사람들은 보통 개발자를 직업으로 선택하지 않았기 때문에 다른 직업에는 어디에나 있을 이들의 존재 자체가 특이한 명칭을 얻게된 셈. 3.14.2 여성이슈 관련 Want to bro down and crush some code? Klout is hiring. 개발 직군에 여성들도 많이 들어오게 되면서 해당 언어에 개발직군 특유의 남초현상, 그리고 해당 남초현상에서 비롯한 미소지니 문제와 관련된 언어로 쓰이는 추세기도 하다. 3.14.3 기타 Evan Spiegel 의 이메일 이슈 http://www.pcmag.com/encyclopedia/term/64050/brogrammer -->"],
["gui-tropes.html", "4 사용자 인터페이스 비유 ", " 4 사용자 인터페이스 비유 "],
["chrome.html", "4.1 크롬", " 4.1 크롬 꽤 화려해 보이는 기능들이지만 실제로는 딱히 별 기능을 주지 못하는 마케팅용 피쳐들. 브라우저의 이름이기도 하다. "],
["Bells-and-whistles.html", "4.2 Bells and whistles", " 4.2 Bells and whistles 제품의 실제 기능과는 별로 상관없이 개발자들이 원해서 넣은 기능들. 크롬과는 달리 개발자들이 넣는 기능이다. 이런게 미처 삭제되지 않고 가면 나름 화제거리가 되기도 한다. 가령 이스터에그나 치트코드 같은 것. -->"],
["holywar-tropes.html", "5 전쟁 비유", " 5 전쟁 비유 Holywar, flame war, or religious issue 물론 그래봤자 게시판에서 싸우는 수준이지만. 상황을 잘 고려해서 서로의 처지를 인정하고 각 도구의 장단점을 이해하는 합의가 이루어진다면 이런 일이 일어날 수는 없다. 하지만 잊었는가? 전쟁같은게 일어난다는거 자체가 합의가 안되니까 일어나는거다. 양쪽이 첨예하게 대립하는 분야를 잘 파보면 반드시 흥미로운 것들이 발견된다. vi vs emacs 유닉스 vs ITS 유닉스 vs VMS 유닉스 vs System V C vs Pascal C vs Fortran KDE vs GNOME vim vs elvis Linux vs. [Free|Net|Open]BSD "],
["editorwar.html", "5.1 편집기 전쟁", " 5.1 편집기 전쟁 Editor war Introduction vi와 emacs 의 라이벌 매치. 왜 이런 일이 일어나는가 선택 문제 문제는 어느 상황에서도 돌아가는 무료 도구는 저 두 개 밖에 없다. 어떤 편집기는 윈도우에만 돌아가고 어떤 편집기들은 라이선스를 요구한다. 학습비용 차이 두 도구 모두 엄청 배우기 어렵다. 혼자만 개발한다면 문제가 없지만 팀으로 개발하다보면 탭설정이나 최대라인수 등등의 설정의 제약을 주기 마련인데 그게 특정 편집기 강요로 이어지기도 한다. 당연히 반발로 이어진다. 철학 차이 단순히 선호하는 소프트웨어 취향의 문제 이전에 철학의 차이기도 하다. 하나만 잘하는 도구와 여러 개를 다 지원하는 도구. -->"],
["english-tropes.html", "6 영어 비유", " 6 영어 비유 If you don’t have functional English, learn it: as an American and native English-speaker myself, I have previously been reluctant to suggest this, lest it be taken as a sort of cultural imperialism. But several native speakers of other languages have urged me to point out that English is the working language of the hacker culture and the Internet, and that you will need to know it to function in the hacker community — How to Become A Hacker 개발자에게 영어는 매우 중요하다. 애초에 영어로 변수들의 이름을 정하지 못한다면 프로그래밍을 할 수 없다. 프로그래밍을 떠나서 설명하고 질문하고 답하는 모든 일에 영어의 사용이 필요하다. 실제로 외국인을 만나지 않더라도 해당 지식들이 영어사용자 커뮤니티들에 모여있기 때문에 검색만이라도 영어로 할 수 있어야 한다. API 문서들도 영어로만 작성되어 있는 경우가 많다. 이게 또 그냥 영어만 잘하는 걸 떠나서 해커들끼리만 쓰이는 영어표현이 있다. 가령 일상어에서의 evil과 해커 영어에서의 evil의 뜻 차이는 천차만별이다. 하지만 실제로 배운 영어와 프로그래밍 영어는 또 다르다. 게다가 외국어도 많다. 애초에 영어 내에 프랑스어의 영향이 강하기도 하고, 2차대전 중 독일어의 영향을 받은 단어들도 사용된다. "],
["elegant.html", "6.1 elegant", " 6.1 elegant “A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away.” -Antoine de Saint-Exupéry "],
["crash.html", "6.2 crash", " 6.2 crash 동작하던 것이 급작스럽고 의도치않게 중지된 것을 의미한다. "],
["down.html", "6.3 down", " 6.3 down 동작하지 않음. 이걸 만든 원인을 묘사할때는 crash 라는 표현을 쓰고, 다시 동작할때는 up 이라는 표현을 사용한다. "],
["up.html", "6.4 up", " 6.4 up 가령 up and running 이라고하면 동작을 시작해서 계속 작동한다 정도의 의미가 된다. "],
["evil.html", "6.5 evil", " 6.5 evil 똑똑한 사람이 잘못된 방향에 꽂혀서 멋지지만 이상한 설계 혹은 코딩을 한 경우 "],
["rude.html", "6.6 rude", " 6.6 rude 한 마디로 다른 사람에게 피해를 주는 구현. 다양한 이유가 있는데 가령 돌아가는 프로그램이 다른 프로그램까지 죽이거나, 인수자 혹은 리뷰어 입장에서 읽기 힘든 코드이거나, 혼자 툭튀어서 프로젝트 진행에 유독 많은 구현 비용을 요구하게 되는 경우. evil이 실력보다는 잘못된 결정의 문제라면, rude는 실력과 연관되는 비유이다. "],
["under-the-hood.html", "6.7 under the hood", " 6.7 under the hood GUI 혹은 하드웨어만 봐서는 잘 드러나지 않는 구현의 핵심을 소개할 때 쓰는 표현. 일부러 영어 표현 그대로 작성. "],
["workaround.html", "6.8 workaround", " 6.8 workaround 개발시 필요에 의해 특정 문제를 회피하는 구현 방안이다. 추후 제대로 된 방식으로 수정될 대상이기도. 버그 수정이 workaround 인지 fix 인지 구분하는 것은 코드리뷰에서 중요한 포인트 중 하나이다. 그럼에도 보통 hotfix 가 실은 hot-workaround인 것이 현실. 비슷한 용어로 kluge 참조. "],
["metasyntactic-variable.html", "6.9 metasyntactic variable", " 6.9 metasyntactic variable https://en.wikipedia.org/wiki/Metasyntactic_variable http://catb.org/jargon/html/M/metasyntactic-variable.html "],
["critical-mass.html", "6.10 critical mass", " 6.10 critical mass In physics, the minimum amount of fissionable material required to sustain a chain reaction. Of a software product, describes a condition of the software such that fixing one bug introduces one plus epsilon bugs. When software achieves critical mass, it can never be fixed; it can only be discarded and rewritten. "],
["Don-t-do-that-then.html", "6.11 그럼 하지 말라고", " 6.11 그럼 하지 말라고 Don’t do that then! "],
["C-ampersand-C.html", "6.12 C&amp;C", " 6.12 C&amp;C Coffee &amp; Cats "],
["user-friendly.html", "6.13 user-friendly", " 6.13 user-friendly 사용자를 위한다는 명목. 정작 그 사용자는 자신이 뭘 원하는지 확실하게 모르기 때문에 제품을 완성하기가 무척 어렵게 된다. 프로그래머는 저 표현은 개발의 주도권을 넘겨준다는 의미로 받아들이고, 해당 주장은 조소와 비아냥의 대상이 되곤 한다. "],
["vanila.html", "6.14 바닐라", " 6.14 바닐라 vanilla 옛날엔 아이스크림이 바닐라를 기초로 뭐가 추가되는 식으로 소비자들에게 제공되었다. 한 마디로 순정판. -->"],
["communication-tropes.html", "7 의사소통 비유 ", " 7 의사소통 비유 "],
["sufficiently-advanced-gibberish.html", "7.1 충분히 발전된 횡설수설", " 7.1 충분히 발전된 횡설수설 any sufficiently advanced gibberish is indistinguishable from riddle 딱히 자신이 모르는게 나타나면 갑자기 전혀 엉뚱한 - 하지만 화자에게는 매우 익숙한 구멍 - 으로 도망치곤 한다. 문제는 이게 꽤 말이 되는거처럼 들린다는 것. "],
["sufficiently-advanced-riddle.html", "7.2 충분히 발전된 해법", " 7.2 충분히 발전된 해법 any sufficiently advanced riddle is indistinguishable from gibberish 어떤 문제는 굉장히 직관적으로 이해가 안되는 방법으로 해결된다. -->"],
["unclassified-tropes.html", "8 미분류 비유 ", " 8 미분류 비유 "],
["Turing-test.html", "8.1 튜링 테스트", " 8.1 튜링 테스트 Turing test 자신과 대화하는 상대는 과연 사람일까 인공지능일까? 해당 인공지능의 성숙도를 채팅을 통해 확인하는 가설검정 방법을 의미한다. "],
["Carmack-test.html", "8.2 카맥 테스트", " 8.2 카맥 테스트 존 카맥의 업적 — 디스플레이와 입력장치가 있는 모든 컴퓨터라고 불릴 수 있을 것 같은 장치가 컴퓨터인지 확인 하는 수단으로 쓰이는 둠을 개발. "],
["airplane-rule.html", "8.3 비행기 법칙", " 8.3 비행기 법칙 Airplane rule “Complexity increases the possibility of failure; a twin-engine airplane has twice as many engine problems as a single-engine airplane.” 단순한 디자인이 견고한 소프트웨어를 만든다는 이야기. "],
["Infinite-loop.html", "8.4 무한루프", " 8.4 무한루프 Infinite loop "],
["Alderson-loop.html", "8.5 Alderson loop", " 8.5 Alderson loop Alderson loop GUI의 구현 문제로 인해서 무한루프에 빠지는 경우를 말한다. 지금은 Infinite loop 이긴 인데 exit condition 을 만들어놨지만 어쩌다보니 해당 컨디션이 발동하지 않는 경우를 말한다. "],
["Zawinskis-law.html", "8.6 자윈스키 법칙", " 8.6 자윈스키 법칙 “Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can.” 모든 프로그램은 이메일 기능이 포함될때까지 불어난다. 사용자들은 그런 기능이 없는 프로그램들 대신에 불어난 프로그램을 사용한다. - Jamie Zawinski 프로그램들이 점점 복잡해지고, 그렇게 복잡해진 프로그램들이 사용자들에 의해 사랑받는 현상을 표현. 해당 비유는 이메일이 중요하다는 이야기가 아니다. 소프트웨어 제작에 있어서 사용자들의 요구가 소프트웨어의 개발 방향에 큰 영향을 미친다는 사실을 강조한다. 사용자들은 보통 단순한 기능 혹은 최소한의 기능을 강조하는 경향이 있지만 그건 소프트웨어를 단순하게 만들라기 보다는 그들의 워크플로우를 단순하게 만들어달라는 걸 의미한다. 이메일 클라이언트 프로그램이 아닌 이상 일반적인 프로그램에 이메일 기능은 고려대상이 아니지만, 사용자 입장에선 그거 알게 뭔가. 자윈스키는 전설적인 개발자로 추후 따로 페이지 작성필요. "],
["Brookss-Law.html", "8.7 브룩스의 법칙", " 8.7 브룩스의 법칙 “지체되는 소프트웨어 개발 프로젝트에 인력을 더하는 것은 개발을 늦출 뿐이다”라고 주장한 법칙. “임산부가 아무리 많아도, 아이를 낳는 데에는 9개월이 걸린다.” 라고 덧붙이기도 했다. IBM 의 OS/360 프로젝트 매니저였던 프레드 브룩스가 맨먼스 미신에서 주장한 글이다. 그는 아예 시간 복잡도를 내기도 했다. “\\(N\\) 명의 프로그래머들에게 작업량을 나누는 시간복잡도는 \\(O(N)\\)이지만, 프로그래머들 간의 의사소통 비용과 결과물을 제대로 합치는데에는 \\(O(N^2)\\)의 시간이 수행된다.” 프로그래머라면 몸으로 이걸 체득하고 있지만 매니저들은 종종 까먹곤 한다. 성당과 시장에서 이 논리는 반박된다. 해당 서적은 오픈 소스의 성공을 브룩스 법칙에 대한 반례로 제시하며, 제대로 된 커뮤니티에 의해 돌아간다면, 매우 많은 수의 프로그래머들을 통해서 효율적으로 수행되는 시장과 같이 돌아간다고 주장한다. "],
["bot.html", "8.8 bot", " 8.8 bot "],
["BLOB.html", "8.9 BLOB", " 8.9 BLOB Binary Large OBject "],
["RTFM.html", "8.10 RTFM", " 8.10 RTFM Read The Fucking Manual 시간 낭비인 쓸때없는 질문들을 까기 위해서 사용하곤 하는 문장. "],
["BSOD.html", "8.11 죽음의 블루스크린", " 8.11 죽음의 블루스크린 Blue Screen of Death 윈도우즈의 실행에 문제가 생겼을때 보여주는 화면. 갑자기 퍼런 화면과 함께 알아먹지 못할 경고문구들을 막 출력함으로서 사람을 실겁하게 만든다. 재부팅 말고는 답이 없기 때문에 그 전에 저장하지 않았던 작업물들은 모두 잃어버리게 된다. 유독 윈도우에 반감이 강한 프로그래머 커뮤니티 뿐 아니라 디자이너 등의 모든 개발자가 공감하는 주제. "],
["wintendo.html", "8.12 윈텐도", " 8.12 윈텐도 Wintendo 게임용으로만 사용하기 위해 구입한 윈도우 PC를 의미한다. 즉, 자신은 일반적인 컴퓨터 작업들을 리눅스나 맥으로 처리한다는 걸 강조하는 것. 이런 자세가 지나치면 리눅스에 오픈오피스를 쓰면 되는데 왜 윈도우에 오피스를 쓰느냐까지 갈 수도 있다. "],
["This-time-for-sure.html", "8.13 이번엔 진짜 됩니다", " 8.13 이번엔 진짜 됩니다 This time, for sure! 사망플래그 특히 주변에 사람을 세워놓고 디버깅하면 좀 미안하기도 하고해서 저런 주문을 자주 외우곤 한다. "],
["bus-factor.html", "8.14 버스 팩터", " 8.14 버스 팩터 bus factor 혹은 truck factor “만약에 우리 팀들 중 일부가 트럭에 치여버렸다고 치자. 과연 프로젝트는 굴러갈 수 있을까?” 뭐 딱히 버스거나 트럭일 필요는 없다. 퇴직하거나, 이직하거나 혹은 아이를 가지거나, 그냥 사람이 갑자기 변해버렸다거나 여러 가지 요인이 있을 수 있다. 중요한 것은 프로젝트 정보가 얼마나 공유되며, 구현 및 유지보수를 책임질 수 있는 능력이 어떻게 분배되어 있느냐는 것이다. 즉, 이 질문은 프로젝트 수행팀의 성숙도를 평가한다. 해당 factor 가 높을 수록 해당 프로젝트는 안정적. 많은 오픈소스가 이 경우에 해당한다. 이를 다룬 블로그를 확인해보자. "],
["os.html", "9 OS ", " 9 OS "],
["macintrash.html", "9.1 Macintrash", " 9.1 Macintrash The Apple Macintosh, as described by a hacker who doesn’t appreciate being kept away from the real computer by the interface. "],
["macintoy.html", "9.2 Macintoy", " 9.2 Macintoy -->"],
["books.html", "10 서적", " 10 서적 Aluminum Book, Camel Book, Cinderella Book, daemon book, Dragon Book, Orange Book, Purple Book, Wizard Book, and bible "],
["cathedral-bazaar.html", "10.1 성당과 시장", " 10.1 성당과 시장 에릭 레이몬드가 1997년, 리눅스의 대성공을 분석하고 작성한 에세이. 브룩스 법칙을 아래와 같이 정면 반박하기도 한다. 사용자들을 공동개발자로 생각하면 코드가 다른 어떤 방법보다도 빠른 속도로 개선되며 효율적으로 디버깅할 수 있다. 개발 조정자가 최소한 인터넷만큼 좋은 매체를 가지고 있으며 강제력을 사용하지 않고 어떻게 이끌어야 할 지 알고 있다면 한 명 보다는 여러명의 리더가 필연적으로 더 낫다. 한국어 번역이 있다. 원문은 이곳에서 확인해보자. -->"],
["websites.html", "11 웹사이트 ", " 11 웹사이트 "],
["Twitter.html", "11.1 트위터", " 11.1 트위터 Twitter "],
["GitHub.html", "11.2 GitHub", " 11.2 GitHub "],
["WikiWikiWeb.html", "11.3 WikiWikiWeb", " 11.3 WikiWikiWeb http://wiki.c2.com/ https://github.com/WardCunningham/remodeling 11.3.1 Tropes CamelCase "],
["programmers.html", "12 프로그래머 ", " 12 프로그래머 "],
["Eric-Raymond.html", "12.1 에릭 레이몬드", " 12.1 에릭 레이몬드 Eric Steven Raymond -->"]
]
